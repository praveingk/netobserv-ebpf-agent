syntax = "proto3";

package pbflow;

import 'google/protobuf/timestamp.proto';

option go_package = "./pbflow";

service Collector {
  rpc Send(Records) returns (CollectorReply) {}
}

// intentionally empty
message CollectorReply {}

message Records {
  repeated Record entries = 1;
}

message Record {
  // protocol as defined by ETH_P_* in linux/if_ether.h
  // https://github.com/torvalds/linux/blob/master/include/uapi/linux/if_ether.h
  uint32 eth_protocol = 1;
  Direction direction = 2;
  google.protobuf.Timestamp time_flow_start = 3;
  google.protobuf.Timestamp time_flow_end = 4;

  // OSI-layer attributes
  DataLink data_link = 5;
  Network network = 6;
  Transport transport = 7;

  uint64 bytes = 8;
  uint64 packets = 9;
  string interface = 10;

  // if true, the same flow has been recorded via another interface.
  // From all the duplicate flows, one will set this value to false and the rest will be true.
  bool duplicate = 11;

  // Agent IP address to help identifying the source of the flow
  IP agent_ip = 12;
  uint32 flags = 13;
  Icmp   icmp = 14;
}

message DataLink {
  uint64 src_mac = 1;
  uint64 dst_mac = 2;
}

message Network {
  IP src_addr = 1;
  IP dst_addr = 2;
}

message IP {
  oneof ip_family {
    fixed32 ipv4 = 1;
    bytes ipv6 = 2;
  }
}

message Transport {
  uint32 src_port = 1;
  uint32 dst_port = 2;
  // protocol as defined by IPPROTO_* in linux/in.h
  // https://github.com/torvalds/linux/blob/master/include/uapi/linux/in.h
  uint32 protocol = 3;
}

message Icmp {
  uint32 icmp_type = 1;
  uint32 icmp_code = 2;
}

// as defined by field 61 in
// https://www.iana.org/assignments/ipfix/ipfix.xhtml
enum Direction {
  INGRESS = 0;
  EGRESS = 1;
}
